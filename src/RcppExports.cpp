// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// submat_rcpp
NumericMatrix submat_rcpp(NumericMatrix X, LogicalVector condition);
RcppExport SEXP weimea_submat_rcpp(SEXP XSEXP, SEXP conditionSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type condition(conditionSEXP);
    __result = Rcpp::wrap(submat_rcpp(X, condition));
    return __result;
END_RCPP
}
// subvec_rcpp
NumericVector subvec_rcpp(NumericVector x, LogicalVector condition);
RcppExport SEXP weimea_subvec_rcpp(SEXP xSEXP, SEXP conditionSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type condition(conditionSEXP);
    __result = Rcpp::wrap(subvec_rcpp(x, condition));
    return __result;
END_RCPP
}
// rowsum_rcpp
NumericVector rowsum_rcpp(NumericMatrix X);
RcppExport SEXP weimea_rowsum_rcpp(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    __result = Rcpp::wrap(rowsum_rcpp(X));
    return __result;
END_RCPP
}
// stand_tot_rcpp
NumericMatrix stand_tot_rcpp(NumericMatrix sitspe);
RcppExport SEXP weimea_stand_tot_rcpp(SEXP sitspeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type sitspe(sitspeSEXP);
    __result = Rcpp::wrap(stand_tot_rcpp(sitspe));
    return __result;
END_RCPP
}
// wm_Cpp
NumericMatrix wm_Cpp(NumericMatrix sitspe, NumericMatrix speatt);
RcppExport SEXP weimea_wm_Cpp(SEXP sitspeSEXP, SEXP speattSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type sitspe(sitspeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type speatt(speattSEXP);
    __result = Rcpp::wrap(wm_Cpp(sitspe, speatt));
    return __result;
END_RCPP
}
// stand_tot_arma
arma::mat stand_tot_arma(arma::mat& sitspe);
RcppExport SEXP weimea_stand_tot_arma(SEXP sitspeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat& >::type sitspe(sitspeSEXP);
    __result = Rcpp::wrap(stand_tot_arma(sitspe));
    return __result;
END_RCPP
}
// wm_Cpp2
arma::mat wm_Cpp2(arma::mat sitspe, arma::mat speatt);
RcppExport SEXP weimea_wm_Cpp2(SEXP sitspeSEXP, SEXP speattSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type sitspe(sitspeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type speatt(speattSEXP);
    __result = Rcpp::wrap(wm_Cpp2(sitspe, speatt));
    return __result;
END_RCPP
}
// count_if
int count_if(LogicalVector x);
RcppExport SEXP weimea_count_if(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< LogicalVector >::type x(xSEXP);
    __result = Rcpp::wrap(count_if(x));
    return __result;
END_RCPP
}
// test_LR_cor
List test_LR_cor(arma::mat sitspe, arma::mat speatt, arma::mat env, CharacterVector cor_coef, double perm);
RcppExport SEXP weimea_test_LR_cor(SEXP sitspeSEXP, SEXP speattSEXP, SEXP envSEXP, SEXP cor_coefSEXP, SEXP permSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type sitspe(sitspeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type speatt(speattSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type env(envSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type cor_coef(cor_coefSEXP);
    Rcpp::traits::input_parameter< double >::type perm(permSEXP);
    __result = Rcpp::wrap(test_LR_cor(sitspe, speatt, env, cor_coef, perm));
    return __result;
END_RCPP
}
// is_in
bool is_in(CharacterVector x, CharacterVector table);
RcppExport SEXP weimea_is_in(SEXP xSEXP, SEXP tableSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type table(tableSEXP);
    __result = Rcpp::wrap(is_in(x, table));
    return __result;
END_RCPP
}
// test_MR_cor
List test_MR_cor(arma::mat sitspe, arma::mat speatt, arma::mat env, CharacterVector test, CharacterVector cor_coef, double perm, double P_testLR, double testLR_perm);
RcppExport SEXP weimea_test_MR_cor(SEXP sitspeSEXP, SEXP speattSEXP, SEXP envSEXP, SEXP testSEXP, SEXP cor_coefSEXP, SEXP permSEXP, SEXP P_testLRSEXP, SEXP testLR_permSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat >::type sitspe(sitspeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type speatt(speattSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type env(envSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type test(testSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type cor_coef(cor_coefSEXP);
    Rcpp::traits::input_parameter< double >::type perm(permSEXP);
    Rcpp::traits::input_parameter< double >::type P_testLR(P_testLRSEXP);
    Rcpp::traits::input_parameter< double >::type testLR_perm(testLR_permSEXP);
    __result = Rcpp::wrap(test_MR_cor(sitspe, speatt, env, test, cor_coef, perm, P_testLR, testLR_perm));
    return __result;
END_RCPP
}
